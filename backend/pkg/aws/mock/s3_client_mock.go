// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/aws/s3_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockS3ClientInterface is a mock of S3ClientInterface interface.
type MockS3ClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockS3ClientInterfaceMockRecorder
}

// MockS3ClientInterfaceMockRecorder is the mock recorder for MockS3ClientInterface.
type MockS3ClientInterfaceMockRecorder struct {
	mock *MockS3ClientInterface
}

// NewMockS3ClientInterface creates a new mock instance.
func NewMockS3ClientInterface(ctrl *gomock.Controller) *MockS3ClientInterface {
	mock := &MockS3ClientInterface{ctrl: ctrl}
	mock.recorder = &MockS3ClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3ClientInterface) EXPECT() *MockS3ClientInterfaceMockRecorder {
	return m.recorder
}

// DownloadFileContent mocks base method.
func (m *MockS3ClientInterface) DownloadFileContent(ctx context.Context, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFileContent", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFileContent indicates an expected call of DownloadFileContent.
func (mr *MockS3ClientInterfaceMockRecorder) DownloadFileContent(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFileContent", reflect.TypeOf((*MockS3ClientInterface)(nil).DownloadFileContent), ctx, key)
}

// GetFileURL mocks base method.
func (m *MockS3ClientInterface) GetFileURL(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileURL", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileURL indicates an expected call of GetFileURL.
func (mr *MockS3ClientInterfaceMockRecorder) GetFileURL(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileURL", reflect.TypeOf((*MockS3ClientInterface)(nil).GetFileURL), ctx, key)
}

// UploadFile mocks base method.
func (m *MockS3ClientInterface) UploadFile(ctx context.Context, file *multipart.FileHeader, customPath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, file, customPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockS3ClientInterfaceMockRecorder) UploadFile(ctx, file, customPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockS3ClientInterface)(nil).UploadFile), ctx, file, customPath)
}
