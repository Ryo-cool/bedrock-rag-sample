// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/aws/textract_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	aws "bedrock-rag-sample/backend/pkg/aws"
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTextractClientInterface is a mock of TextractClientInterface interface.
type MockTextractClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTextractClientInterfaceMockRecorder
}

// MockTextractClientInterfaceMockRecorder is the mock recorder for MockTextractClientInterface.
type MockTextractClientInterfaceMockRecorder struct {
	mock *MockTextractClientInterface
}

// NewMockTextractClientInterface creates a new mock instance.
func NewMockTextractClientInterface(ctrl *gomock.Controller) *MockTextractClientInterface {
	mock := &MockTextractClientInterface{ctrl: ctrl}
	mock.recorder = &MockTextractClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTextractClientInterface) EXPECT() *MockTextractClientInterfaceMockRecorder {
	return m.recorder
}

// ExtractTextFromDocument mocks base method.
func (m *MockTextractClientInterface) ExtractTextFromDocument(ctx context.Context, file *multipart.FileHeader) (*aws.TextractResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractTextFromDocument", ctx, file)
	ret0, _ := ret[0].(*aws.TextractResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractTextFromDocument indicates an expected call of ExtractTextFromDocument.
func (mr *MockTextractClientInterfaceMockRecorder) ExtractTextFromDocument(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractTextFromDocument", reflect.TypeOf((*MockTextractClientInterface)(nil).ExtractTextFromDocument), ctx, file)
}

// ExtractTextFromS3Key mocks base method.
func (m *MockTextractClientInterface) ExtractTextFromS3Key(ctx context.Context, s3Key string) (*aws.TextractResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractTextFromS3Key", ctx, s3Key)
	ret0, _ := ret[0].(*aws.TextractResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractTextFromS3Key indicates an expected call of ExtractTextFromS3Key.
func (mr *MockTextractClientInterfaceMockRecorder) ExtractTextFromS3Key(ctx, s3Key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractTextFromS3Key", reflect.TypeOf((*MockTextractClientInterface)(nil).ExtractTextFromS3Key), ctx, s3Key)
}
