// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/db_handler_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "bedrock-rag-sample/backend/internal/domain"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBHandlerInterface is a mock of DBHandlerInterface interface.
type MockDBHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDBHandlerInterfaceMockRecorder
}

// MockDBHandlerInterfaceMockRecorder is the mock recorder for MockDBHandlerInterface.
type MockDBHandlerInterfaceMockRecorder struct {
	mock *MockDBHandlerInterface
}

// NewMockDBHandlerInterface creates a new mock instance.
func NewMockDBHandlerInterface(ctrl *gomock.Controller) *MockDBHandlerInterface {
	mock := &MockDBHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockDBHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHandlerInterface) EXPECT() *MockDBHandlerInterfaceMockRecorder {
	return m.recorder
}

// FindSimilarChunks mocks base method.
func (m *MockDBHandlerInterface) FindSimilarChunks(ctx context.Context, embedding []float32, limit int) ([]domain.DocumentChunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSimilarChunks", ctx, embedding, limit)
	ret0, _ := ret[0].([]domain.DocumentChunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSimilarChunks indicates an expected call of FindSimilarChunks.
func (mr *MockDBHandlerInterfaceMockRecorder) FindSimilarChunks(ctx, embedding, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSimilarChunks", reflect.TypeOf((*MockDBHandlerInterface)(nil).FindSimilarChunks), ctx, embedding, limit)
}

// GetDocumentByID mocks base method.
func (m *MockDBHandlerInterface) GetDocumentByID(ctx context.Context, documentID int64) (*domain.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentByID", ctx, documentID)
	ret0, _ := ret[0].(*domain.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentByID indicates an expected call of GetDocumentByID.
func (mr *MockDBHandlerInterfaceMockRecorder) GetDocumentByID(ctx, documentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentByID", reflect.TypeOf((*MockDBHandlerInterface)(nil).GetDocumentByID), ctx, documentID)
}

// SaveDocumentEmbedding mocks base method.
func (m *MockDBHandlerInterface) SaveDocumentEmbedding(ctx context.Context, documentID int64, chunk string, chunkIndex int, embedding []float32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDocumentEmbedding", ctx, documentID, chunk, chunkIndex, embedding)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveDocumentEmbedding indicates an expected call of SaveDocumentEmbedding.
func (mr *MockDBHandlerInterfaceMockRecorder) SaveDocumentEmbedding(ctx, documentID, chunk, chunkIndex, embedding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDocumentEmbedding", reflect.TypeOf((*MockDBHandlerInterface)(nil).SaveDocumentEmbedding), ctx, documentID, chunk, chunkIndex, embedding)
}
