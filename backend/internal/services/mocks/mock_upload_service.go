// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/upload_service_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	services "bedrock-rag-sample/backend/internal/services"
	aws "bedrock-rag-sample/backend/pkg/aws"
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUploadServiceInterface is a mock of UploadServiceInterface interface.
type MockUploadServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUploadServiceInterfaceMockRecorder
}

// MockUploadServiceInterfaceMockRecorder is the mock recorder for MockUploadServiceInterface.
type MockUploadServiceInterfaceMockRecorder struct {
	mock *MockUploadServiceInterface
}

// NewMockUploadServiceInterface creates a new mock instance.
func NewMockUploadServiceInterface(ctrl *gomock.Controller) *MockUploadServiceInterface {
	mock := &MockUploadServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUploadServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadServiceInterface) EXPECT() *MockUploadServiceInterfaceMockRecorder {
	return m.recorder
}

// GetS3Client mocks base method.
func (m *MockUploadServiceInterface) GetS3Client() aws.S3ClientInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetS3Client")
	ret0, _ := ret[0].(aws.S3ClientInterface)
	return ret0
}

// GetS3Client indicates an expected call of GetS3Client.
func (mr *MockUploadServiceInterfaceMockRecorder) GetS3Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetS3Client", reflect.TypeOf((*MockUploadServiceInterface)(nil).GetS3Client))
}

// UploadFile mocks base method.
func (m *MockUploadServiceInterface) UploadFile(ctx context.Context, file *multipart.FileHeader) (*services.UploadFileResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, file)
	ret0, _ := ret[0].(*services.UploadFileResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockUploadServiceInterfaceMockRecorder) UploadFile(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockUploadServiceInterface)(nil).UploadFile), ctx, file)
}
