// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/document_service_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	services "bedrock-rag-sample/backend/internal/services"
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDocumentServiceInterface is a mock of DocumentServiceInterface interface.
type MockDocumentServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentServiceInterfaceMockRecorder
}

// MockDocumentServiceInterfaceMockRecorder is the mock recorder for MockDocumentServiceInterface.
type MockDocumentServiceInterfaceMockRecorder struct {
	mock *MockDocumentServiceInterface
}

// NewMockDocumentServiceInterface creates a new mock instance.
func NewMockDocumentServiceInterface(ctrl *gomock.Controller) *MockDocumentServiceInterface {
	mock := &MockDocumentServiceInterface{ctrl: ctrl}
	mock.recorder = &MockDocumentServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentServiceInterface) EXPECT() *MockDocumentServiceInterfaceMockRecorder {
	return m.recorder
}

// ProcessDocument mocks base method.
func (m *MockDocumentServiceInterface) ProcessDocument(ctx context.Context, file *multipart.FileHeader) (*services.DocumentProcessResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessDocument", ctx, file)
	ret0, _ := ret[0].(*services.DocumentProcessResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessDocument indicates an expected call of ProcessDocument.
func (mr *MockDocumentServiceInterfaceMockRecorder) ProcessDocument(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessDocument", reflect.TypeOf((*MockDocumentServiceInterface)(nil).ProcessDocument), ctx, file)
}

// ProcessDocumentByS3Key mocks base method.
func (m *MockDocumentServiceInterface) ProcessDocumentByS3Key(ctx context.Context, s3Key string) (*services.DocumentProcessResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessDocumentByS3Key", ctx, s3Key)
	ret0, _ := ret[0].(*services.DocumentProcessResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessDocumentByS3Key indicates an expected call of ProcessDocumentByS3Key.
func (mr *MockDocumentServiceInterfaceMockRecorder) ProcessDocumentByS3Key(ctx, s3Key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessDocumentByS3Key", reflect.TypeOf((*MockDocumentServiceInterface)(nil).ProcessDocumentByS3Key), ctx, s3Key)
}
