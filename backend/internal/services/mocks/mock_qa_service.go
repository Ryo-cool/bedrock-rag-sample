// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/qa_service_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	services "bedrock-rag-sample/backend/internal/services"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQAServiceInterface is a mock of QAServiceInterface interface.
type MockQAServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockQAServiceInterfaceMockRecorder
}

// MockQAServiceInterfaceMockRecorder is the mock recorder for MockQAServiceInterface.
type MockQAServiceInterfaceMockRecorder struct {
	mock *MockQAServiceInterface
}

// NewMockQAServiceInterface creates a new mock instance.
func NewMockQAServiceInterface(ctrl *gomock.Controller) *MockQAServiceInterface {
	mock := &MockQAServiceInterface{ctrl: ctrl}
	mock.recorder = &MockQAServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQAServiceInterface) EXPECT() *MockQAServiceInterfaceMockRecorder {
	return m.recorder
}

// SimpleRAG mocks base method.
func (m *MockQAServiceInterface) SimpleRAG(ctx context.Context, query string) (*services.QAResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimpleRAG", ctx, query)
	ret0, _ := ret[0].(*services.QAResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SimpleRAG indicates an expected call of SimpleRAG.
func (mr *MockQAServiceInterfaceMockRecorder) SimpleRAG(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimpleRAG", reflect.TypeOf((*MockQAServiceInterface)(nil).SimpleRAG), ctx, query)
}
