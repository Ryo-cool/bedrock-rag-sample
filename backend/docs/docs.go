// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/document/process": {
            "post": {
                "description": "アップロードされたドキュメントからTextractでテキストを抽出し、その内容を要約します。",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Document"
                ],
                "summary": "ドキュメント処理 (Textract + 要約)",
                "parameters": [
                    {
                        "type": "file",
                        "description": "処理するドキュメント (PDF/画像, 最大15MB)",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ドキュメント処理成功",
                        "schema": {
                            "$ref": "#/definitions/services.DocumentProcessResult"
                        }
                    },
                    "400": {
                        "description": "リクエスト不正 (ファイルなし、サイズ超過、サポート外形式など)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "サーバー内部エラー (処理失敗)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/document/{id}/embedding": {
            "post": {
                "description": "指定されたIDのドキュメントを取得し、Embeddingを生成・保存します。",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Recommend"
                ],
                "summary": "ドキュメントEmbedding処理",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "処理対象ドキュメントのID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "処理成功メッセージ",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "リクエスト不正 (無効なIDなど)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "ドキュメントが見つからない",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "サーバー内部エラー (処理失敗)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/qa": {
            "post": {
                "description": "Knowledge Baseを使用して質問に回答します。",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QA"
                ],
                "summary": "RAG Q\u0026A",
                "parameters": [
                    {
                        "description": "質問を含むリクエストボディ",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.QueryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "回答生成成功",
                        "schema": {
                            "$ref": "#/definitions/services.QAResult"
                        }
                    },
                    "400": {
                        "description": "リクエスト不正 (質問が空など)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "サーバー内部エラー (回答生成失敗)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/recommend": {
            "post": {
                "description": "指定されたクエリにベクトル検索で類似するドキュメントを検索します。",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Recommend"
                ],
                "summary": "類似ドキュメント検索",
                "parameters": [
                    {
                        "description": "検索クエリと取得件数",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RecommendRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "類似ドキュメントチャンクの配列",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DocumentChunk"
                            }
                        }
                    },
                    "400": {
                        "description": "リクエスト不正 (クエリが空など)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "サーバー内部エラー (検索失敗)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/summarize/file": {
            "post": {
                "description": "アップロードされたファイル (PDF, 画像) の内容を要約します。",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Summarize"
                ],
                "summary": "ファイル要約",
                "parameters": [
                    {
                        "type": "file",
                        "description": "要約するファイル (PDF/画像, 最大5MB)",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "要約成功",
                        "schema": {
                            "$ref": "#/definitions/services.SummarizeResult"
                        }
                    },
                    "400": {
                        "description": "リクエスト不正 (ファイルなし、サイズ超過など)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "サーバー内部エラー (要約失敗)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/summarize/text": {
            "post": {
                "description": "指定されたテキストを要約します。",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Summarize"
                ],
                "summary": "テキスト要約",
                "parameters": [
                    {
                        "description": "要約するテキストを含むリクエストボディ",
                        "name": "text",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.TextRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "要約成功",
                        "schema": {
                            "$ref": "#/definitions/services.SummarizeResult"
                        }
                    },
                    "400": {
                        "description": "リクエスト不正 (テキストが空など)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "サーバー内部エラー (要約失敗)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/upload": {
            "post": {
                "description": "指定されたファイルをS3にアップロードします。",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Upload"
                ],
                "summary": "ファイルアップロード",
                "parameters": [
                    {
                        "type": "file",
                        "description": "アップロードするファイル (最大20MB)",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "アップロード成功。S3のキーとURLを含む",
                        "schema": {
                            "$ref": "#/definitions/services.UploadFileResult"
                        }
                    },
                    "400": {
                        "description": "リクエスト不正 (ファイルなし、サイズ超過など)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "サーバー内部エラー (アップロード失敗)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "aws.TextractResult": {
            "type": "object",
            "properties": {
                "document_id": {
                    "type": "string"
                },
                "pages": {
                    "type": "integer"
                },
                "s3_key": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "handlers.QueryRequest": {
            "description": "Q\u0026A APIのリクエストボディ",
            "type": "object",
            "required": [
                "query"
            ],
            "properties": {
                "query": {
                    "description": "RAGシステムへの質問",
                    "type": "string",
                    "example": "BedrockのKnowledge Baseについて教えてください。"
                }
            }
        },
        "handlers.RecommendRequest": {
            "description": "類似ドキュメント検索APIのリクエストボディ",
            "type": "object",
            "required": [
                "query"
            ],
            "properties": {
                "limit": {
                    "description": "取得するドキュメントの最大数 (デフォルト5, 最大20)",
                    "type": "integer",
                    "example": 5
                },
                "query": {
                    "description": "検索クエリ",
                    "type": "string",
                    "example": "Bedrockについて"
                }
            }
        },
        "handlers.TextRequest": {
            "description": "テキスト要約APIのリクエストボディ",
            "type": "object",
            "required": [
                "text"
            ],
            "properties": {
                "text": {
                    "description": "要約するテキスト",
                    "type": "string",
                    "example": "これは要約するテキストです。"
                }
            }
        },
        "models.DocumentChunk": {
            "type": "object",
            "properties": {
                "chunk_index": {
                    "type": "integer"
                },
                "chunk_text": {
                    "type": "string"
                },
                "document_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "similarity": {
                    "type": "number"
                }
            }
        },
        "models.ErrorDetail": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "エラーコード (例: INVALID_INPUT)",
                    "type": "string"
                },
                "details": {
                    "description": "詳細情報 (省略可能)",
                    "type": "string"
                },
                "message": {
                    "description": "ユーザーフレンドリーなメッセージ",
                    "type": "string"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/models.ErrorDetail"
                }
            }
        },
        "services.DocumentProcessResult": {
            "type": "object",
            "properties": {
                "document_info": {
                    "$ref": "#/definitions/aws.TextractResult"
                },
                "file_type": {
                    "type": "string"
                },
                "original_text": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                }
            }
        },
        "services.QAResult": {
            "type": "object",
            "properties": {
                "answer": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                },
                "retrieved_documents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.RetrievedDocument"
                    }
                }
            }
        },
        "services.RetrievedDocument": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "document_id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                }
            }
        },
        "services.SummarizeResult": {
            "type": "object",
            "properties": {
                "source_text": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                },
                "upload_info": {
                    "$ref": "#/definitions/services.UploadFileResult"
                }
            }
        },
        "services.UploadFileResult": {
            "type": "object",
            "properties": {
                "filename": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Bedrock RAG Sample API",
	Description:      "This is a sample API server for Bedrock RAG.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
